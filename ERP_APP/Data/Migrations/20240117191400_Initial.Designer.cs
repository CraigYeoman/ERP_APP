// <auto-generated />
using System;
using ERP_APP.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ERP_APP.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240117191400_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ERP_APP.Data.BaseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BaseEntities");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseEntity");
                });

            modelBuilder.Entity("ERP_APP.Data.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ERP_APP.Data.Accessories", b =>
                {
                    b.HasBaseType("ERP_APP.Data.BaseEntity");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Accessories");
                });

            modelBuilder.Entity("ERP_APP.Data.Customer", b =>
                {
                    b.HasBaseType("ERP_APP.Data.BaseEntity");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("ERP_APP.Data.JobType", b =>
                {
                    b.HasBaseType("ERP_APP.Data.BaseEntity");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("JobType_Name");

                    b.HasDiscriminator().HasValue("JobType");
                });

            modelBuilder.Entity("ERP_APP.Data.Labor", b =>
                {
                    b.HasBaseType("ERP_APP.Data.BaseEntity");

                    b.Property<int>("LaborCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Labor_Name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasIndex("LaborCategoryId");

                    b.HasDiscriminator().HasValue("Labor");
                });

            modelBuilder.Entity("ERP_APP.Data.LaborCategory", b =>
                {
                    b.HasBaseType("ERP_APP.Data.BaseEntity");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LaborCategory_Name");

                    b.HasDiscriminator().HasValue("LaborCategory");
                });

            modelBuilder.Entity("ERP_APP.Data.Part", b =>
                {
                    b.HasBaseType("ERP_APP.Data.BaseEntity");

                    b.Property<decimal>("CostOfGood")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CustomerPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Part_Name");

                    b.Property<int>("PartCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("PartNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasIndex("PartCategoryId");

                    b.HasIndex("VendorId");

                    b.HasDiscriminator().HasValue("Part");
                });

            modelBuilder.Entity("ERP_APP.Data.PartCategory", b =>
                {
                    b.HasBaseType("ERP_APP.Data.BaseEntity");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PartCategory_Name");

                    b.HasDiscriminator().HasValue("PartCategory");
                });

            modelBuilder.Entity("ERP_APP.Data.Payment", b =>
                {
                    b.HasBaseType("ERP_APP.Data.BaseEntity");

                    b.Property<decimal>("Deposit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("WorkOrderId")
                        .HasColumnType("int");

                    b.HasIndex("WorkOrderId");

                    b.HasDiscriminator().HasValue("Payment");
                });

            modelBuilder.Entity("ERP_APP.Data.Vendor", b =>
                {
                    b.HasBaseType("ERP_APP.Data.BaseEntity");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Vendor_Address");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Vendor_City");

                    b.Property<string>("CustomerNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Vendor_Email");

                    b.Property<string>("MainContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Vendor_Name");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int")
                        .HasColumnName("Vendor_PhoneNumber");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Vendor_PostalCode");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Vendor_State");

                    b.HasDiscriminator().HasValue("Vendor");
                });

            modelBuilder.Entity("ERP_APP.Data.WorkOrder", b =>
                {
                    b.HasBaseType("ERP_APP.Data.BaseEntity");

                    b.Property<bool>("Complete")
                        .HasColumnType("bit");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFinished")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateReceived")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("JobTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkOrderNumber")
                        .HasColumnType("int");

                    b.HasIndex("CustomerId");

                    b.HasIndex("JobTypeId");

                    b.HasDiscriminator().HasValue("WorkOrder");
                });

            modelBuilder.Entity("ERP_APP.Data.WorkOrderAccessories", b =>
                {
                    b.HasBaseType("ERP_APP.Data.BaseEntity");

                    b.Property<int>("AccessoriesId")
                        .HasColumnType("int");

                    b.Property<int>("WorkOrderId")
                        .HasColumnType("int")
                        .HasColumnName("WorkOrderAccessories_WorkOrderId");

                    b.HasIndex("AccessoriesId");

                    b.HasIndex("WorkOrderId");

                    b.HasDiscriminator().HasValue("WorkOrderAccessories");
                });

            modelBuilder.Entity("ERP_APP.Data.WorkOrderLabor", b =>
                {
                    b.HasBaseType("ERP_APP.Data.BaseEntity");

                    b.Property<int>("LaborId")
                        .HasColumnType("int");

                    b.Property<int>("WorkOrderId")
                        .HasColumnType("int")
                        .HasColumnName("WorkOrderLabor_WorkOrderId");

                    b.HasIndex("LaborId");

                    b.HasIndex("WorkOrderId");

                    b.HasDiscriminator().HasValue("WorkOrderLabor");
                });

            modelBuilder.Entity("ERP_APP.Data.WorkOrderPart", b =>
                {
                    b.HasBaseType("ERP_APP.Data.BaseEntity");

                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.Property<int>("WorkOrderId")
                        .HasColumnType("int")
                        .HasColumnName("WorkOrderPart_WorkOrderId");

                    b.HasIndex("PartId");

                    b.HasIndex("WorkOrderId");

                    b.HasDiscriminator().HasValue("WorkOrderPart");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ERP_APP.Data.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ERP_APP.Data.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP_APP.Data.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ERP_APP.Data.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ERP_APP.Data.Labor", b =>
                {
                    b.HasOne("ERP_APP.Data.LaborCategory", "LaborCategory")
                        .WithMany("Labors")
                        .HasForeignKey("LaborCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LaborCategory");
                });

            modelBuilder.Entity("ERP_APP.Data.Part", b =>
                {
                    b.HasOne("ERP_APP.Data.PartCategory", "PartCategory")
                        .WithMany("Parts")
                        .HasForeignKey("PartCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP_APP.Data.Vendor", "Vendor")
                        .WithMany("Parts")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartCategory");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("ERP_APP.Data.Payment", b =>
                {
                    b.HasOne("ERP_APP.Data.WorkOrder", "WorkOrder")
                        .WithMany("Payments")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("ERP_APP.Data.WorkOrder", b =>
                {
                    b.HasOne("ERP_APP.Data.Customer", "Customer")
                        .WithMany("WorkOrders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP_APP.Data.JobType", "JobType")
                        .WithMany("WorkOrders")
                        .HasForeignKey("JobTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("JobType");
                });

            modelBuilder.Entity("ERP_APP.Data.WorkOrderAccessories", b =>
                {
                    b.HasOne("ERP_APP.Data.Accessories", "Accessories")
                        .WithMany("WorkOrderAccessories")
                        .HasForeignKey("AccessoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP_APP.Data.WorkOrder", "WorkOrder")
                        .WithMany("WorkOrderAccessories")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accessories");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("ERP_APP.Data.WorkOrderLabor", b =>
                {
                    b.HasOne("ERP_APP.Data.Labor", "Labor")
                        .WithMany("WorkOrderLabor")
                        .HasForeignKey("LaborId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP_APP.Data.WorkOrder", "WorkOrder")
                        .WithMany("WorkOrderLabors")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Labor");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("ERP_APP.Data.WorkOrderPart", b =>
                {
                    b.HasOne("ERP_APP.Data.Part", "Part")
                        .WithMany("WorkOrderParts")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP_APP.Data.WorkOrder", "WorkOrder")
                        .WithMany("WorkOrderParts")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("ERP_APP.Data.Accessories", b =>
                {
                    b.Navigation("WorkOrderAccessories");
                });

            modelBuilder.Entity("ERP_APP.Data.Customer", b =>
                {
                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("ERP_APP.Data.JobType", b =>
                {
                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("ERP_APP.Data.Labor", b =>
                {
                    b.Navigation("WorkOrderLabor");
                });

            modelBuilder.Entity("ERP_APP.Data.LaborCategory", b =>
                {
                    b.Navigation("Labors");
                });

            modelBuilder.Entity("ERP_APP.Data.Part", b =>
                {
                    b.Navigation("WorkOrderParts");
                });

            modelBuilder.Entity("ERP_APP.Data.PartCategory", b =>
                {
                    b.Navigation("Parts");
                });

            modelBuilder.Entity("ERP_APP.Data.Vendor", b =>
                {
                    b.Navigation("Parts");
                });

            modelBuilder.Entity("ERP_APP.Data.WorkOrder", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("WorkOrderAccessories");

                    b.Navigation("WorkOrderLabors");

                    b.Navigation("WorkOrderParts");
                });
#pragma warning restore 612, 618
        }
    }
}
